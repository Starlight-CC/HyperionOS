-- Copyright (C) 2025 ASTRONAND
-- Get boot arguments
local bootArgs=({...})[1]
local bootDrive=bootArgs.bootDrive
local LOG_TEXT=""
local log={}

local function getPName()
    return "Hyprkrnl"
end
function log.log(text)
    LOG_TEXT=LOG_TEXT.."[LOG] "..getPName()..": "..text.."\n"
end

function log.error(text)
    LOG_TEXT=LOG_TEXT.."[ERR] "..getPName()..": "..text.."\n"
end

function log.warn(text)
    LOG_TEXT=LOG_TEXT.."[WARN] "..getPName()..": "..text.."\n"
end

local function func(tble,space)
    space=space or ""
    for i,v in pairs(tble) do
        print(space..tostring(i).." | "..tostring(v))
        if type(v) == "table" then
            if i=="_G" then else
                func(v,space.."   ")
            end
        end
    end
end

-- My favorite function
local function PANIC(err,lvl)
    clear()
    print(LOG_TEXT)
    printInline("KERNEL PANIC: "..err)
    while true do sleep(1) end
end

local function runAsKernel(path, args)
    local ok,err,extra = pcall(load(bootDrive:open(path):read()), args)
    if not ok then
        PANIC(path.." failed to load/execute err:\n"..err)
    end
    return err,extra
end

-- Add libray modifications+
for _,v in ipairs(bootDrive:list("/sys/kernel/glib")) do
    runAsKernel("/sys/kernel/glib/"..v)
    log.log("Loaded "..v)
end
log.log("finished loading global librarys")
local sudoMaster={}
local auth=runAsKernel("sys/kernel/userManager.sys",{masterKey=sudoMaster,bootDrive=bootDrive})
log.log("Created UE Manager")
local fs=runAsKernel("sys/kernel/filesystem.sys",{bootDrive=bootDrive,auth=auth})
log.log("Initailized filesystem")

local makeRequire=runAsKernel("sys/modules/require",{filesystem=fs,logging=log})
log.log("Loaded require")
local packages={filesystem=fs, auth=auth, logging=log, require=makeRequire}
local setRequire
_G.require,setRequire=makeRequire("/lib/?;/lib/?/init;/sys/modules/?;/sys/modules/?/init",packages)
log.log("Initailized require")

local code=fs.open("sys/kernel/hypervisor.sys","x")

if not code then
    PANIC("Hypervisor failed to load")
end
local ok,hypervisor=pcall(code,setRequire)
if not ok then
    PANIC("Hypervisor failed to execute")
end
log.log("Loaded hypervisor")

--[[
hypervisor.createProcessFromFunc(function()
    
end,"Hyprkrnl")]]

PANIC("FORCE_KERNEL_PANIC")