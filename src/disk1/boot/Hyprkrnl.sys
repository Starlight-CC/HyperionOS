local function rand()
    if math.random(0)==0 then return true else return false end
end
function coroutine.resumeWithTimeout(CORO, TIME, ...)
    return rand(), coroutine.resume(CORO, ...)
end

-- Copyright (C) 2025 ASTRONAND
-- Get boot arguments
local bootArgs=({...})[1]
local bootDrive=bootArgs.bootDrive
local LOG_TEXT=""
local log={}
local term
local bootData=load("return "..bootDrive:open("var/log/kernel/bootData").read())()
local computer=component.getFirst("computer")
local startup=true
local oldYield=coroutine.yield

function coroutine.yield(...)
    if coroutine.isyieldable(coroutine.running()) then
        oldYield(...)
    end
end

-- Find terminal
term=component.getFirst("screen")

-- Difine logging lib
local function getPName()
    return "Hyprkrnl"
end

function log.log(text)
    if startup then term.print("[LOG] "..getPName()..": "..text) end
    LOG_TEXT=LOG_TEXT.."[LOG] "..getPName()..": "..text.."\n"
end

function log.error(text)
    if startup then term.print("[ERR] "..getPName()..": "..text) end
    LOG_TEXT=LOG_TEXT.."[ERR] "..getPName()..": "..text.."\n"
end

function log.warn(text)
    if startup then term.print("[WARN] "..getPName()..": "..text) end
    LOG_TEXT=LOG_TEXT.."[WARN] "..getPName()..": "..text.."\n"
end

function log.get()
    return LOG_TEXT
end

local function t2t(table)
    local output = "{"
    for i,v in pairs(table) do
        local coma=true
        if type(i) == "string" then
            output=output.."[\""..i.."\"]="
        end
        if type(v) == "table" then
            if v == table then
                output=string.sub(output,1,#output-(#i+1))
                coma=false
            else
                output=output..t2t(v)
            end
        elseif type(v) == "string" then
            output=output.."[=["..v.."]=]"
        elseif type(v) == "number" then
            output=output..tostring(v)
        elseif type(v) == "function" then
            output=string.sub(output,1,#output-(#i+1))
            coma=false
        end
        if coma then
            output=output..","
        end
    end
    if #table>0 or string.sub(output,#output,#output) == "," then
        output=string.sub(output,1,#output-1)
    end
    output=output.."}"
    return output
end

-- My favorite function
local function PANIC(err,lvl)
    term.clear()
    term.print(LOG_TEXT)
    term.printInline("KERNEL PANIC: "..err)
    computer.beep(800,0.2,1)
    sleep(0.02)
    if err==bootData.prevError then
        bootData.errorCount=bootData.errorCount+1
    else
        bootData.prevError=err
        bootData.errorCount=0
    end
    bootDrive:open("var/log/kernel/bootData").write(t2t(bootData))
    if bootData.errorCount < 4 then
        term.print("")
        term.print("Atempting reboot...")
        sleep(0.5)
        computer.reboot()
    elseif bootData.errorCount > 3 then
        term.print("")
        term.print("boot determined to be unrecoverable...")
        sleep(0.5)
        computer.shutdown()
    end
    while true do
        
    end
end

local function runAsKernel(path, args)
    local ok,err,extra = pcall(load(bootDrive:open(path):read()), args)
    if not ok then
        PANIC(path.." failed to load/execute err:\n"..err)
    end
    return err,extra
end

-- Add libray modifications+
for _,v in ipairs(bootDrive:list("/sys/kernel/glib")) do
    runAsKernel("/sys/kernel/glib/"..v)
    log.log("Loaded "..v)
end
log.log("finished loading global librarys")
local sudoMaster={}
local auth=runAsKernel("sys/kernel/userManager.sys",{masterKey=sudoMaster,bootDrive=bootDrive})
log.log("Created UE Manager")
local fs=runAsKernel("sys/kernel/filesystem.sys",{bootDrive=bootDrive,auth=auth})
log.log("Initailized filesystem")
local packages={filesystem=fs, auth=auth, logging=log, term=term}
local req=runAsKernel("sys/modules/require",{filesystem=fs,logging=log, preload=packages})
log.log("Loaded require")
local setRequire
local requ=req.makeRequire("lib/?;lib/?/init;sys/modules/?;sys/modules/?/init",packages)
_G.require, setRequire = requ.require, requ.load
setRequire("require",req)
log.log("Initailized require")

local code=fs.open("sys/kernel/hypervisor.sys","x")

if not code then
    PANIC("Hypervisor failed to load")
end
local ok,hypervisor=pcall(code,{masterKey=sudoMaster,setRequire=setRequire})
if not ok then
    PANIC("Hypervisor failed to execute ERR:\n"..hypervisor)
end
log.log("Loaded hypervisor")
log.log("Created kernel process")
startup=false
hypervisor(function()
    local hpv=require("hypervisor")
    hpv.createProcessFromFile("sys/os/init.lua", "system")
    while true do
        coroutine.yield()
    end
end)
PANIC("Hypervisor exited")
