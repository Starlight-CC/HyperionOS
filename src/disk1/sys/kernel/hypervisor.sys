local args=({...})[1]
local fs=require("filesystem")
--local sfs=fs.getSudo(args.masterKey)
local auth=require("auth")
local system={}
local uuid=-1
local computer=component.getFirst("computer")
local time=computer.time()
local root={}
local currentTask={chlidren=root}

-- Task status
-- "R" | Runnable/Running
-- "S" | Sleeping/Waiting
-- "P" | Stopped/Paused
-- "Z" | Exited
-- "E" | Errored
-- "T" | Terminate
-- "X" | Marked for GC

local function UUID()
    uuid=uuid+1
    return tostring(uuid)
end

function system.create(func, name, ...)
    local id=UUID()
    local fargs={...}
    local task={}
    local handle={}
    task={
        sleep=0,
        state="N",
        thread=coroutine.create(function()
            local ret={pcall(func, table.unpack(fargs))}
            local ok, tret = ret[1], {table.unpack(ret,2)}
            if not ok then
                task.state="E"
                task.exit_state=tret[1]
                task.exit_code=1
            else
                if #tret>0 then
                    task.state="Z"
                    task.exit_state=tret
                    task.exit_code=0
                else
                    task.state="X"
                end
            end
        end),
        PID=id,
        comm=string.sub(name, 1, 32),
        parent=currentTask,
        chlidren={},
        sibling=currentTask.chlidren,
        files={},
        nvcsw=0,
        nivcsw=0,
        handle=handle,
        start_time=time
    }
    currentTask.chlidren[name]=task
    function handle.kill()
        task.state="K"
    end
    function handle.pause()
        if task.state=="R" then
            task.state="T"
            return true
        else
            return false
        end
    end
    function handle.resume()
        if task.state=="T" then
            task.state="R"
            return true
        else
            return false
        end
    end
    function handle.getPID()
        return task.PID
    end
    function handle.getParent()
        return task.parent.PID
    end
    function handle.getState()
        return task.state
    end
    return handle
end

